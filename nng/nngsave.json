{
  "name": "Natural number game",
  "version": "1.3.3",
  "data": [
    {
      "lean": "lemma example1 (x y z : mynat) : x * y + z = x * y + z :=\n",
      "isSolved": true,
      "editorText": "refl\r\n"
    },
    {
      "lean": "lemma example2 (x y : mynat) (h : y = x + 7) : 2 * y = 2 * (x + 7) :=\n",
      "isSolved": true,
      "editorText": "rw h,\r\nrefl\r\n"
    },
    {
      "lean": "lemma example3 (a b : mynat) (h : succ a = b) : succ(succ(a)) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "rw h,\r\nrefl\r\n"
    },
    {
      "lean": "lemma add_succ_zero (a : mynat) : a + succ(0) = succ(a) :=\n",
      "isSolved": true,
      "editorText": "rw add_succ,\r\nrw add_zero,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma zero_add (n : mynat) : 0 + n = n :=\n",
      "isSolved": true,
      "editorText": "induction n with d hd,\r\nrw add_zero,\r\nrefl,\r\nrw add_succ,\r\nrw hd,\r\nrefl,\r\n"
    },
    {
      "lean": "lemma add_assoc (a b c : mynat) : (a + b) + c = a + (b + c) :=\n",
      "isSolved": true,
      "editorText": "induction c with d hd,\nrw add_zero,\nrw add_zero,\nrefl,\nrw add_succ,\nrw hd,\nrefl,\n"
    },
    {
      "lean": "lemma succ_add (a b : mynat) : succ a + b = succ (a + b) :=\n",
      "isSolved": true,
      "editorText": "induction b with d hd,\nrw add_zero,\nrw add_zero,\nrefl,\nrw add_succ,\nrw add_succ,\nrw hd,\nrefl,\n"
    },
    {
      "lean": "lemma add_comm (a b : mynat) : a + b = b + a :=\n",
      "isSolved": true,
      "editorText": "induction a with x hx,\nrw add_zero,\nrw zero_add,\nrefl,\nrw add_succ,\nrw succ_add,\nrw hx,\nrefl,\n"
    },
    {
      "lean": "theorem succ_eq_add_one (n : mynat) : succ n = n + 1 :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\nrw add_succ,\nrw add_zero,\nrefl,\n"
    },
    {
      "lean": "lemma add_right_comm (a b c : mynat) : a + b + c = a + c + b :=\n",
      "isSolved": true,
      "editorText": "induction a with d hd,\nrw add_assoc,\nrw add_assoc,\nrw zero_add,\nrw zero_add,\nrw add_comm,\nrefl,\nrw succ_add,\nrw succ_add,\nrw succ_add,\nrw succ_add,\nrw hd,\nrefl,\n\n"
    },
    {
      "lean": "lemma zero_mul (m : mynat) : 0 * m = 0 :=\n",
      "isSolved": true,
      "editorText": "induction m with x hx,\nrw mul_zero 0,\nrefl,\nrw mul_succ,\nrw add_zero (0*x),\nrw hx,\nrefl,\n\n"
    },
    {
      "lean": "lemma mul_one (m : mynat) : m * 1 = m :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\nrw mul_succ m 0,\nrw mul_zero m,\nrw zero_add m,\nrefl,\n\n\n"
    },
    {
      "lean": "lemma one_mul (m : mynat) : 1 * m = m :=\n",
      "isSolved": true,
      "editorText": "induction m with x hx,\nrw mul_zero 1,\nrefl,\n\nrw mul_succ 1,\nrw hx,\nrw succ_eq_add_one x,\nrefl,\n\n\n\n"
    },
    {
      "lean": "lemma mul_add (t a b : mynat) : t * (a + b) = t * a + t * b :=\n",
      "isSolved": true,
      "editorText": "induction b with x hx,\nrw add_zero a,\nrw mul_zero t,\nrw add_zero (t*a),\nrefl,\n\nrw add_succ a,\n\nrw mul_succ t,\nrw hx,\nrw mul_succ t x,\nrw add_assoc (t*a) (t*x) t,\nrefl,\n\n\n"
    },
    {
      "lean": "lemma mul_assoc (a b c : mynat) : (a * b) * c = a * (b * c) :=\n",
      "isSolved": true,
      "editorText": "induction c with x hx,\nrw mul_zero b,\nrw mul_zero a,\nrw mul_zero (a * b),\nrefl,\n\nrw mul_succ (a*b) x,\nrw hx,\nrw mul_succ b x,\nrw mul_add a (b*x) b,\nrefl,\n\n"
    },
    {
      "lean": "lemma succ_mul (a b : mynat) : succ a * b = a * b + b :=\n",
      "isSolved": true,
      "editorText": "induction b with x hx,\nrw add_zero (a*0),\nrw mul_zero (succ(a)),\nrw mul_zero a,\nrefl,\n\nrw add_succ,\nrw mul_succ a x,\nrw succ_eq_add_one x,\nrw mul_add (succ a) x 1,\nrw hx,\nrw mul_one (succ a),\nrw succ_eq_add_one ((a*x)+a+x),\nrw succ_eq_add_one a,\nrw add_assoc (a*x) a x,\nrw add_comm a x,\nrw add_assoc,\nrw add_assoc,\nrw add_assoc,\nrefl,\n\n"
    },
    {
      "lean": "lemma add_mul (a b t : mynat) : (a + b) * t = a * t + b * t :=\n",
      "isSolved": true,
      "editorText": "induction t with x hx,\nrw mul_zero (a+b),\nrw mul_zero a,\nrw mul_zero b,\nrefl,\n\nrw succ_eq_add_one,\nrw mul_add,\nrw mul_one (a+b),\nrw hx,\nrw mul_add,\nrw mul_add,\nrw mul_one a,\nrw mul_one b,\nrw add_comm (b*x) b,\nrw add_assoc,\nrw add_comm (b*x) (a+b),\nrw add_assoc,\nrw add_assoc,\nrefl,\n\n\n"
    },
    {
      "lean": "lemma mul_comm (a b : mynat) : a * b = b * a :=\n",
      "isSolved": true,
      "editorText": "induction b with x hx,\nrw zero_mul a,\nrw mul_zero a,\nrefl,\n\nrw succ_eq_add_one x,\nrw mul_add a x 1,\nrw mul_one a,\nrw add_mul x 1 a,\nrw one_mul a,\nrw hx,\nrefl,\n\n"
    },
    {
      "lean": "lemma mul_left_comm (a b c : mynat) : a * (b * c) = b * (a * c) :=\n",
      "isSolved": true,
      "editorText": "induction c with x hx,\nrw mul_zero b,\nrw mul_zero a,\nrw mul_zero b,\nrefl,\n\nrw succ_eq_add_one,\nrw mul_add b x 1,\nrw mul_one b,\nrw mul_add a x 1,\nrw mul_one a,\nsimp,\nrw mul_add a b (b*x),\nrw mul_add b a (a*x),\nrw hx,\nrw mul_comm a b,\nrefl,\n\n\n"
    },
    {
      "lean": "lemma zero_pow_zero : (0 : mynat) ^ (0 : mynat) = 1 :=\n",
      "isSolved": true,
      "editorText": "rw pow_zero 0,\nrefl,\n"
    },
    {
      "lean": "lemma zero_pow_succ (m : mynat) : (0 : mynat) ^ (succ m) = 0 :=\n",
      "isSolved": true,
      "editorText": "rw pow_succ,\nrw mul_zero,\nrefl,\n"
    },
    {
      "lean": "lemma pow_one (a : mynat) : a ^ (1 : mynat) = a :=\n",
      "isSolved": true,
      "editorText": "rw one_eq_succ_zero,\nrw pow_succ a,\nrw pow_zero a,\nrw one_mul a,\nrefl,\n"
    },
    {
      "lean": "lemma one_pow (m : mynat) : (1 : mynat) ^ m = 1 :=\n",
      "isSolved": true,
      "editorText": "induction m with x hx,\nrw pow_zero 1,\nrefl,\n\nrw pow_succ 1 x,\nrw hx,\nrw one_mul 1,\nrefl,\n"
    },
    {
      "lean": "lemma pow_add (a m n : mynat) : a ^ (m + n) = a ^ m * a ^ n :=\n",
      "isSolved": true,
      "editorText": "induction m with x hx,\nrw pow_zero a,\nrw one_mul (a^n),\nrw zero_add n,\nrefl,\n\nrw pow_succ a x,\nrw succ_add x n,\nrw pow_succ a (x+n),\nrw hx,\nsimp,\n"
    },
    {
      "lean": "lemma mul_pow (a b n : mynat) : (a * b) ^ n = a ^ n * b ^ n :=\n",
      "isSolved": true,
      "editorText": "induction n with x hx,\nrw pow_zero (a*b),\nrw pow_zero a,\nrw pow_zero b,\nrw one_mul,\nrefl,\n\nrw pow_succ (a*b),\nrw pow_succ a,\nrw pow_succ b,\nsimp,\nrw hx,\nrefl,\n"
    },
    {
      "lean": "lemma pow_pow (a m n : mynat) : (a ^ m) ^ n = a ^ (m * n) :=\n",
      "isSolved": true,
      "editorText": "induction n with x hx,\nrw pow_zero (a^m),\nrw mul_zero m,\nrw pow_zero a,\nrefl,\n\nrw pow_succ (a^m) x,\nrw hx,\nrw succ_eq_add_one x,\nrw mul_add m x 1,\nrw mul_one m,\nrw pow_add a (m*x) m,\nsimp,\n"
    },
    {
      "lean": "lemma add_squared (a b : mynat) :\n  (a + b) ^ (2 : mynat) = a ^ (2 : mynat) + b ^ (2 : mynat) + 2 * a * b :=\n",
      "isSolved": true,
      "editorText": "rw two_eq_succ_one,\nrw one_eq_succ_zero,\nrepeat {rw pow_succ},\nrepeat {rw pow_zero},\nring,\n\n"
    },
    {
      "lean": "example (P Q : Type) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h(p),\r\n"
    },
    {
      "lean": "example : mynat → mynat :=\n",
      "isSolved": true,
      "editorText": "intro n,\r\nexact 3*n+2,\r\n\r\n\r\n"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q := h(p),\r\nhave t := j(q),\r\nhave u := l(t),\r\nexact u,\r\n\r\n"
    },
    {
      "lean": "example (P Q R S T U: Type)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q := h(p),\r\nhave t := j(q),\r\nhave u := l(t),\r\nexact u,\r\n\r\n"
    },
    {
      "lean": "example (P Q : Type) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intro p,\r\nintro q,\r\nexact p,\r\n"
    },
    {
      "lean": "example (P Q R : Type) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intro h1,\r\nintro h2,\r\nintro p,\r\nhave q := h2(p),\r\nhave h3 := h1(p),\r\nhave r := h3(q),\r\nexact r,\r\n\r\n"
    },
    {
      "lean": "example (P Q F : Type) : (P → Q) → ((Q → F) → (P → F)) :=\n",
      "isSolved": true,
      "editorText": "intro h1,\r\nintro h2,\r\nintro p,\r\nhave q := h1(p),\r\nhave f := h2(q),\r\nexact f,\r\n"
    },
    {
      "lean": "example (P Q : Type) : (P → Q) → ((Q → empty) → (P → empty)) :=\n",
      "isSolved": true,
      "editorText": "intro h1,\r\nintro h2,\r\nintro p,\r\nhave q := h1(p),\r\nhave e := h2(q),\r\nexact e,\r\n"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Type)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "intro a,\r\napply f15,\r\napply f11,\r\napply f9,\r\napply f8,\r\napply f5,\r\napply f2,\r\napply f1,\r\nexact a,\r\n"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (h : P → Q) : Q :=\n",
      "isSolved": true,
      "editorText": "exact h(p),\n"
    },
    {
      "lean": "lemma imp_self (P : Prop) : P → P :=\n",
      "isSolved": true,
      "editorText": "intro p,\nexact p,\n"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q := h(p),\nhave t := j(q),\nhave u := l(t),\nexact u,\n"
    },
    {
      "lean": "lemma maze (P Q R S T U: Prop)\n(p : P)\n(h : P → Q)\n(i : Q → R)\n(j : Q → T)\n(k : S → T)\n(l : T → U)\n: U :=\n",
      "isSolved": true,
      "editorText": "have q := h(p),\nhave t := j(q),\nhave u := l(t),\nexact u,\n"
    },
    {
      "lean": "example (P Q : Prop) : P → (Q → P) :=\n",
      "isSolved": true,
      "editorText": "intro p,\nintro q,\nexact p,\n"
    },
    {
      "lean": "example (P Q R : Prop) : (P → (Q → R)) → ((P → Q) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intro h1,\nintro h2,\nintro p,\nhave h3 := h1(p),\nhave q := h2(p),\nhave r := h3(q),\nexact r,\n"
    },
    {
      "lean": "lemma imp_trans (P Q R : Prop) : (P → Q) → ((Q → R) → (P → R)) :=\n",
      "isSolved": true,
      "editorText": "intro hpq,\nintro hqr,\nintro p,\nhave q := hpq(p),\nhave r := hqr(q),\nexact r,\n"
    },
    {
      "lean": "lemma contrapositive (P Q : Prop) : (P → Q) → (¬ Q → ¬ P) :=\n",
      "isSolved": true,
      "editorText": "repeat {rw not_iff_imp_false},\nintro hpq,\nintro hqn,\nintro p,\nhave q := hpq(p),\nhave n := hqn(q),\nexact n,\n"
    },
    {
      "lean": "example (A B C D E F G H I J K L : Prop)\n(f1 : A → B) (f2 : B → E) (f3 : E → D) (f4 : D → A) (f5 : E → F)\n(f6 : F → C) (f7 : B → C) (f8 : F → G) (f9 : G → J) (f10 : I → J)\n(f11 : J → I) (f12 : I → H) (f13 : E → H) (f14 : H → K) (f15 : I → L)\n : A → L :=\n",
      "isSolved": true,
      "editorText": "intro a,\napply f15,\napply f11,\napply f9,\napply f8,\napply f5,\napply f2,\napply f1,\nexact a,\n"
    },
    {
      "lean": "example (P Q : Prop) (p : P) (q : Q) : P ∧ Q :=\n",
      "isSolved": true,
      "editorText": "split,\nexact p,\nexact q,\n"
    },
    {
      "lean": "lemma and_symm (P Q : Prop) : P ∧ Q → Q ∧ P :=\n",
      "isSolved": true,
      "editorText": "intro h,\ncases h with p q,\nsplit,\nexact q,\nexact p,\n"
    },
    {
      "lean": "lemma and_trans (P Q R : Prop) : P ∧ Q → Q ∧ R → P ∧ R :=\n",
      "isSolved": true,
      "editorText": "intro h1,\nintro h2,\ncases h1 with p q1,\ncases h2 with q2 r,\nsplit,\nexact p,\nexact r,\n"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intro h1,\nintro h2,\ncases h1 with hpq hqp,\ncases h2 with hqr hrq,\nsplit,\nintro p,\nhave q := hpq(p),\nhave r := hqr(q),\nexact r,\nintro r,\nhave q := hrq(r),\nhave p := hqp(q),\nexact p,\n"
    },
    {
      "lean": "lemma iff_trans (P Q R : Prop) : (P ↔ Q) → (Q ↔ R) → (P ↔ R) :=\n",
      "isSolved": true,
      "editorText": "intro h1,\nintro h2,\ncases h1 with hpq hqp,\ncases h2 with hqr hrq,\nsplit,\nintro p,\nhave q := hpq(p),\nhave r := hqr(q),\nexact r,\nintro r,\nhave q := hrq(r),\nhave p := hqp(q),\nexact p,\n"
    },
    {
      "lean": "example (P Q : Prop) : Q → (P ∨ Q) :=\n",
      "isSolved": true,
      "editorText": "intro q,\nright,\nexact q,\n"
    },
    {
      "lean": "lemma or_symm (P Q : Prop) : P ∨ Q → Q ∨ P :=\n",
      "isSolved": true,
      "editorText": "intro h,\ncases h with p q,\nright,\nexact p,\nleft,\nexact q,\n"
    },
    {
      "lean": "lemma and_or_distrib_left (P Q R : Prop) : P ∧ (Q ∨ R) ↔ (P ∧ Q) ∨ (P ∧ R) :=\n",
      "isSolved": true,
      "editorText": "split,\nintro h1,\ncases h1 with p qr,\ncases qr with q r,\nleft,\nsplit,\nexact p,\nexact q,\nright,\nsplit,\nexact p,\nexact r,\nintro h2,\nsplit,\ncases h2,\ncases h2,\nexact h2_left,\ncases h2,\nexact h2_left,\ncases h2,\ncases h2,\nleft,\nexact h2_right,\nright,\ncases h2,\nexact h2_right,\n\n\n\n\n"
    },
    {
      "lean": "lemma contra (P Q : Prop) : (P ∧ ¬ P) → Q :=\n",
      "isSolved": true,
      "editorText": "rw not_iff_imp_false,\nintro ppn,\nexfalso,\ncases ppn with p np,\nhave n := np(p),\nexact n,\n"
    },
    {
      "lean": "lemma contrapositive2 (P Q : Prop) : (¬ Q → ¬ P) → (P → Q) :=\n",
      "isSolved": true,
      "editorText": "by_cases p : P; by_cases q : Q,\nrepeat {cc},\n"
    },
    {
      "lean": "theorem succ_inj' {a b : mynat} (hs : succ(a) = succ(b)) :  a = b := \n",
      "isSolved": true,
      "editorText": "have h1 := succ_inj(hs),\nexact h1,\n\n"
    },
    {
      "lean": "theorem succ_succ_inj {a b : mynat} (h : succ(succ(a)) = succ(succ(b))) :  a = b := \n",
      "isSolved": true,
      "editorText": "apply succ_inj,\napply succ_inj,\nexact h,\n"
    },
    {
      "lean": "theorem succ_eq_succ_of_eq {a b : mynat} : a = b → succ(a) = succ(b) :=\n",
      "isSolved": true,
      "editorText": "intro h,\nrw h,\nrefl,\n"
    },
    {
      "lean": "theorem succ_eq_succ_iff (a b : mynat) : succ a = succ b ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "split,\nexact succ_inj,\n\nintro h,\nrw h,\nrefl,\n\n"
    },
    {
      "lean": "theorem add_right_cancel (a t b : mynat) : a + t = b + t → a = b :=\n",
      "isSolved": true,
      "editorText": "intro h,\ninduction t with x hx,\nrw add_zero at h,\nrw add_zero at h,\nrw h,\nrefl,\n\nrw add_succ a x at h,\nrw add_succ b x at h,\nhave h2 := succ_inj(h),\n\nrw hx,\n\nrefl,\n\nexact h2,\n\n"
    },
    {
      "lean": "theorem add_left_cancel (t a b : mynat) : t + a = t + b → a = b :=\n",
      "isSolved": true,
      "editorText": "rw add_comm t a, \nrw add_comm t b,\nexact add_right_cancel a t b,\n"
    },
    {
      "lean": "theorem add_right_cancel_iff (t a b : mynat) :  a + t = b + t ↔ a = b :=\n",
      "isSolved": true,
      "editorText": "split,\nexact add_right_cancel a t b,\n\nintro h,\nrw h,\nrefl,\n"
    },
    {
      "lean": "lemma eq_zero_of_add_right_eq_self {a b : mynat} : a + b = a → b = 0 :=\n",
      "isSolved": true,
      "editorText": "intro h,\nrw ← add_zero a at h,\nrw add_assoc a 0 b at h,\nrw zero_add b at h,\nrw add_left_cancel a b 0,\nrefl,\nexact h,\n"
    },
    {
      "lean": "theorem succ_ne_zero (a : mynat) : succ a ≠ 0 := \n",
      "isSolved": true,
      "editorText": "symmetry,\nexact zero_ne_succ a,\n"
    },
    {
      "lean": "lemma add_left_eq_zero {{a b : mynat}} (H : a + b = 0) : b = 0 :=\n",
      "isSolved": true,
      "editorText": "cases b,\nrefl,\n\nrw add_succ at H,\n\nexfalso,\n\nhave h1 := succ_ne_zero (a+b),\nhave h2 := h1(H),\nexact h2,\n"
    },
    {
      "lean": "lemma add_right_eq_zero {a b : mynat} : a + b = 0 → a = 0 :=\n",
      "isSolved": true,
      "editorText": "cases a,\nintro h,\nrefl,\nintro h,\nrw succ_add at h,\nexfalso,\n\nhave h1 := succ_ne_zero (a+b),\nhave h2 := h1(h),\nexact h2,\n\n\n\n"
    },
    {
      "lean": "theorem add_one_eq_succ (d : mynat) : d + 1 = succ d :=\n",
      "isSolved": true,
      "editorText": "cases d,\nrw zero_add 1,\nrw one_eq_succ_zero,\nrefl,\n\nrw succ_eq_add_one (succ(d)),\nrefl,\n"
    },
    {
      "lean": "lemma ne_succ_self (n : mynat) : n ≠ succ n :=\n",
      "isSolved": true,
      "editorText": "cases n with k,\nexact zero_ne_succ 0,\n\nintro h1,\nhave h2 := succ_inj(h1),\nsymmetry at h2,\nrw succ_eq_add_one at h2,\nhave h3 := eq_zero_of_add_right_eq_self(h2),\napply succ_ne_zero 0,\nexact h3,\n\n"
    },
    {
      "lean": "theorem mul_pos (a b : mynat) : a ≠ 0 → b ≠ 0 → a * b ≠ 0 :=\n",
      "isSolved": true,
      "editorText": "intro ano,\nintro bno,\nintro abo,\ncases b with k,\nrw mul_zero at abo,\nhave boom := bno(abo),\nexact boom,\n\nrw mul_succ at abo,\nhave aeqo := add_left_eq_zero(abo),\napply ano,\nexact aeqo,"
    },
    {
      "lean": "theorem eq_zero_or_eq_zero_of_mul_eq_zero (a b : mynat) (h : a * b = 0) :\n  a = 0 ∨ b = 0 :=\n",
      "isSolved": true,
      "editorText": "cases b,\nright,\nrefl,\n\nleft,\nrw mul_succ at h,\nhave h' := add_left_eq_zero(h),\nexact h',\n\n\n"
    },
    {
      "lean": "theorem mul_eq_zero_iff (a b : mynat): a * b = 0 ↔ a = 0 ∨ b = 0 :=\n",
      "isSolved": true,
      "editorText": "split,\nintro h,\nhave t := eq_zero_or_eq_zero_of_mul_eq_zero a b,\nhave t' := t(h),\nexact t',\n\n\nintro h,\ncases h,\nrw h,\nrw zero_mul,\nrefl,\nrw h,\nrw mul_zero,\nrefl,\n"
    },
    {
      "lean": "theorem mul_left_cancel (a b c : mynat) (ha : a ≠ 0) : a * b = a * c → b = c :=\n",
      "isSolved": true,
      "editorText": "induction c with x hx generalizing b,\nintro h,\nrw mul_zero a at h,\nrw mul_eq_zero_iff at h,\ncases h,\nhave boom := ha(h),\nexfalso,\nexact boom,\nexact h,\n\nintro h,\ncases b,\nrw mul_zero at h,\nsymmetry at h,\nrw mul_succ at h,\n\nhave t := add_left_eq_zero(h),\nhave boom := ha(t),\nexfalso,\nexact boom,\n\n\nrw succ_eq_succ_iff,\nrw mul_succ at h,\nrw mul_succ at h,\nrw add_right_cancel_iff at h,\nhave h' := hx(b),\nexact h'(h),\n"
    },
    {
      "lean": "lemma one_add_le_self (x : mynat) : x ≤ 1 + x :=\n",
      "isSolved": true,
      "editorText": "use 1,\nexact add_comm 1 x,"
    },
    {
      "lean": "lemma le_refl (x : mynat) : x ≤ x :=\n",
      "isSolved": true,
      "editorText": "use 0,\nrefl,\n"
    },
    {
      "lean": "theorem le_succ (a b : mynat) : a ≤ b → a ≤ (succ b) :=\n",
      "isSolved": true,
      "editorText": "intro h,\nrw le_iff_exists_add at h ⊢,\ncases h with c hc,\nrw hc,\nuse c+1,\nrw succ_eq_add_one,\nrw add_assoc,\nrefl,\n"
    },
    {
      "lean": "lemma zero_le (a : mynat) : 0 ≤ a :=\n",
      "isSolved": true,
      "editorText": "cases a,\nuse 0,\nrefl,\nrw le_iff_exists_add,\nuse a+1,\nrw succ_eq_add_one,\nrw zero_add,\nrefl,"
    },
    {
      "lean": "theorem le_trans (a b c : mynat) (hab : a ≤ b) (hbc : b ≤ c) : a ≤ c :=\n",
      "isSolved": true,
      "editorText": "rw le_iff_exists_add at hab hbc ⊢,\ncases hab with x y,\ncases hbc with u v,\nuse x+u,\nrw v,\nrw y,\nrw add_assoc,\nrefl,\n"
    },
    {
      "lean": "theorem le_antisymm (a b : mynat) (hab : a ≤ b) (hba : b ≤ a) : a = b :=\n",
      "isSolved": true,
      "editorText": "cases hab with x h',\ncases hba with y h'',\nrw h'' at h',\nrw h'',\nsymmetry at h',\nrw add_assoc b y x at h',\nhave t := eq_zero_of_add_right_eq_self h',\nhave t' := add_right_eq_zero t,\nrw t',\nrefl,"
    },
    {
      "lean": "lemma le_zero (a : mynat) (h : a ≤ 0) : a = 0 :=\n",
      "isSolved": true,
      "editorText": "rw le_iff_exists_add at h,\ncases h with x hx,\nsymmetry at hx,\nhave h' := add_right_eq_zero(hx),\nexact h',\n"
    },
    {
      "lean": "lemma succ_le_succ (a b : mynat) (h : a ≤ b) : succ a ≤ succ b :=\n",
      "isSolved": true,
      "editorText": "cases h with x hx,\nrw hx,\nuse x,\nrw succ_add a x,\nrefl,\n"
    },
    {
      "lean": "theorem le_total (a b : mynat) : a ≤ b ∨ b ≤ a :=\n",
      "isSolved": true,
      "editorText": "revert a,\ninduction b with x hx,\nintro a,\nright,\nexact zero_le a,\n\nintro a,\ncases a with t u,\nleft,\nexact zero_le (succ (x)),\nhave h := hx(t),\ncases h,\nleft,\napply succ_le_succ t x,\nexact h,\n\nright,\napply succ_le_succ x t,\nexact h,\n"
    },
    {
      "lean": "lemma le_succ_self (a : mynat) : a ≤ succ a :=\n",
      "isSolved": true,
      "editorText": "use 1,\nrefl,"
    },
    {
      "lean": "theorem add_le_add_right {a b : mynat} : a ≤ b → ∀ t, (a + t) ≤ (b + t) :=\n",
      "isSolved": true,
      "editorText": "intro ab,\nintro t,\ninduction t with t ht,\nrw add_zero,\nrw add_zero,\nexact ab,\nrw add_succ,\nrw add_succ,\nrw le_iff_exists_add at ⊢ ht,\n\ncases ht with c,\nuse c,\nrw ht_h,\nrw succ_eq_add_one,\nrw succ_eq_add_one,\nsimp,\n\n"
    },
    {
      "lean": "theorem le_of_succ_le_succ (a b : mynat) : succ a ≤ succ b → a ≤ b :=\n",
      "isSolved": true,
      "editorText": "intro sasb,\nrw le_iff_exists_add at ⊢ sasb,\ncases sasb with c h,\nuse c,\nrw succ_eq_add_one at h,\nrw succ_eq_add_one at h,\nrw add_comm a 1 at h,\nrw add_comm b 1 at h,\nrw add_assoc at h,\nhave h' := add_left_cancel 1 b (a+c),\nhave h'' := h'(h),\nexact h'',\n\n\n"
    },
    {
      "lean": "theorem not_succ_le_self (a : mynat) : ¬ (succ a ≤ a) :=\n",
      "isSolved": true,
      "editorText": "intro h,\nhave h' := le_succ_self a,\nhave boom := le_antisymm (succ(a)) a,\nhave boom' := boom(h),\nhave boom'' := boom'(h'),\n\nsymmetry at boom'',\napply ne_succ_self a,\nexact boom'',\n"
    },
    {
      "lean": "theorem add_le_add_left {a b : mynat} (h : a ≤ b) (t : mynat) :\n  t + a ≤ t + b :=\n",
      "isSolved": true,
      "editorText": "rw le_iff_exists_add at h ⊢,\ncases h with z hz,\nuse z,\nrw add_assoc,\nhave leftcanc := add_right_cancel_iff t b (a+z),\ncases leftcanc with x y,\nhave hz' := y(hz),\nrw add_comm t b,\nrw add_comm t (a+z),\nexact hz',\n\n\n"
    },
    {
      "lean": "lemma lt_aux_one (a b : mynat) : a ≤ b ∧ ¬ (b ≤ a) → succ a ≤ b :=\n",
      "isSolved": true,
      "editorText": "intro e,\ncases e with ab nba,\nrw le_iff_exists_add at ab nba ⊢,\ncases ab with x y,\ncases x with x' x'',\nexfalso,\napply nba,\nuse 0,\nsymmetry,\nrw add_zero,\nexact y,\n\nrw add_succ at y,\nuse x',\nrw succ_add,\nexact y,"
    },
    {
      "lean": "lemma lt_aux_two (a b : mynat) : succ a ≤ b → a ≤ b ∧ ¬ (b ≤ a) :=\n",
      "isSolved": true,
      "editorText": "intro sab,\nsplit,\napply le_of_succ_le_succ,\napply le_succ,\nexact sab,\nintro ba,\nhave h := le_trans (succ(a)) b a,\nhave h' := h(sab),\nhave h'' := h'(ba),\nhave h''' := not_succ_le_self a,\napply h''',\nexact h'',\n\n"
    },
    {
      "lean": "lemma lt_iff_succ_le (a b : mynat) : a < b ↔ succ a ≤ b :=\n",
      "isSolved": true,
      "editorText": "split,\napply lt_aux_one,\napply lt_aux_two,\n"
    }
  ]
}